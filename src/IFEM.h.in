// $Id$
//==============================================================================
//!
//! \file IFEM.h
//!
//! \date Aug 08 2012
//!
//! \author Arne Morten Kvarving / SINTEF
//!
//! \brief Initialization of the IFEM library.
//!
//==============================================================================

#ifndef _IFEM_H_
#define _IFEM_H_

#define IFEM_VERSION_MAJOR @IFEM_VERSION_MAJOR@ //!< Major library version
#define IFEM_VERSION_MINOR @IFEM_VERSION_MINOR@ //!< Minor library version
#define IFEM_VERSION_PATCH @IFEM_VERSION_PATCH@ //!< Patch library version

#include "SIMoptions.h"
#include "LogStream.h"

#ifndef NDEBUG
#include "ScopedLogger.h"
//! \brief Macro for scope logging.
#define SCOPED_LOG ScopedLogger no_conflict_logger(__PRETTY_FUNCTION__);
#else
#define SCOPED_LOG
#endif

class ControlFIFO;
class ControlCallback;


/*!
  \brief Class holding global IFEM configuration.
*/

class IFEM
{
public:
  //! \brief Initializes the IFEM library.
  //! \param[in] arg_c The number of command-line arguments
  //! \param[in] arg_v The command-line arguments
  //! \param[in] title The title of the IFEM simulator
  //! \return The MPI process ID
  static int Init(int arg_c, char** arg_v, const char* title = nullptr);
  //! \brief Closes the IFEM library.
  static void Close();

  //! \brief Applies command-line argument values to the general input options.
  static void applyCommandLineOptions(SIMoptions& opt);
  //! \brief Returns a reference to the general input options.
  static SIMoptions& getOptions() { return cmdOptions; }

  //! \brief Registers a fifo instruction callback.
  static void registerCallback(ControlCallback& cb);
  //! \brief Polls the control fifo for instructions.
  static bool pollControllerFifo();

  static utl::LogStream cout; //!< Combined standard out for parallel processes

  static std::shared_ptr<std::ostringstream> memoryLog; //!< Logging data stored in memory

private:
  static SIMoptions cmdOptions; //!< General input options
  static int argc;              //!< The number of command-line arguments
  static char** argv;           //!< The command-line arguments
  static ControlFIFO* fifo;     //!< Control fifo helper
};

#endif
